mrs_uav_managers:

  estimation_manager:

    state_estimators: [
     "gps_baro",
     "agile",
     "ground_truth"
    ]

    initial_state_estimator: "gps_baro" # will be used as the first state estimator
    agl_height_estimator: "" # only slightly filtered height for checking min height (not used in control feedback)

    # namespace of the state estimator
    agile:

      address: "agile/AgileEstimatorPlugin"

      requires: # data required from the hw api
        gnss: true
        imu: true
        distance_sensor: false
        altitude: false
        magnetometer_heading: false
        position: true
        orientation: true
        velocity: true
        angular_velocity: true

      override_frame_id: # override the default frame_id with a custom one (e.g. slam_origin instead of aloam_origin)
        enabled: false
        frame_id: "" # the desired frame_id without the UAV namespace

      estimators: # the names of the partial estimators
        lateral:
          name: "lat_agile"
        altitude:
          name: "alt_agile"
        heading:
          name: "hdg_hw_api"
          passthrough: true # if true, then heading is not estimated but passed through from the orientation topic

      topics:
        orientation: "hw_api/orientation" # orientation passthrough
        angular_velocity: "hw_api/angular_velocity" # angular velocity passthrough

      # namespace of the altitude estimator
      alt_agile: 

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)
 
        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "switch" # {"eland", "switch", "mitigate"}
  
        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: false
          buffer_size: 200 # [samples] how many states and corrections are kept in history (i.e. estimator running at the default 100 Hz rate will be able to fuse corrections with up to 2 s delay with buffer size of 200 samples)
  
        process_noise: # process noise covariance (Q)
          pos: 1.0 # position state
          vel: 10.0 # velocity state
          acc: 10.0 # acceleration state
  
        corrections: [
          "pos_hw_api",
          "acc_hw_api"
        ]
  
        pos_hw_api:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.01 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/PointStamped"
            topic: "hw_api/position" # without uav namespace
            limit: 
              delay: 2.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 1.0 # [s] larger time step between messages will flag correction as unhealthy
  
          processors: [] # types of processors attached to this measurement

        acc_hw_api:
          state_id: 2 # 0 - position, 1 - velocity, 2 - acceleration
          body_frame: true
          gravity_norm: 9.8066 # will be subtracted from the IMU accelerometer measurements
          noise: 1.00 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "sensor_msgs/Imu"
            topic: "hw_api/imu" # without uav namespace
            limit: 
              delay: 2.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 1.0 # [s] larger time step between messages will flag correction as unhealthy
  
          processors: [] # types of processors attached to this measurement
  

      # namespace of the lateral estimator
      lat_agile: 

        hdg_source_topic: "agile/hdg_hw_api/output" # [mrs_uav_state_estimation/EstimatorOutput]

        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "switch" # {"eland", "switch", "mitigate"}

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: true
          buffer_size: 200 # [samples] how many states and corrections are kept in history (i.e. estimator running at the default 100 Hz rate will be able to fuse corrections with up to 2 s delay with buffer size of 200 samples)

        process_noise: # process noise covariance (Q)
          pos: 0.1 # position state
          vel: 1.0 # velocity state
          acc: 1.0 # acceleration state

        corrections: [
          "pos_hw_api",
          "acc_hw_api"
        ]

        pos_hw_api:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.1 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/PointStamped"
            topic: "hw_api/position" # without uav namespace
            limit: 
              delay: 2.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 1.0 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement

        acc_hw_api:
          state_id: 2 # 0 - position, 1 - velocity, 2 - acceleration
          body_frame: true # exception: maslo velocity is already in the nav frame
          noise: 0.1 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "sensor_msgs/Imu"
            topic: "hw_api/imu" # without uav namespace
            limit: 
              delay: 2.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 1.0 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement

      hdg_hw_api: # namespace of the heading estimator

        max_flight_z: 100.0 # [m] maximum allowed flight Z (in the estimator frame)

        topics:
          orientation: "hw_api/orientation" # without uav namespace
          angular_velocity: "hw_api/angular_velocity" # without uav namespace

  constraint_manager:

    estimator_types: [
      "gps_baro",
      "agile"
    ]

    constraints: [
      "slow",
      "medium",
      "fast",
    ]

    # list of allowed gains per odometry mode
    allowed_constraints:
      gps_baro: ["slow", "medium", "fast"]
      agile: ["slow", "medium", "fast"]

    # those gains will be used automatically when a localization mode switches
    # and the current gains are not in the allowed list (next paragraphs)
    default_constraints:
      gps_baro: "slow"
      agile: "slow"

  gain_manager:

    estimator_types: [
      "gps_baro",
      "agile"
    ]

    gains: [
      "supersoft",
    ]

    # list of allowed gains per odometry mode
    allowed_gains:
      gps_baro: ["supersoft"]
      agile: ["supersoft"]

    # those gains will be used automatically when a localization mode switches
    # and the current gains are not in the allowed list (next paragraphs)
    default_gains:
      gps_baro: "supersoft"
      agile: "supersoft"

  uav_manager:

    takeoff:

      after_takeoff:
        controller: "Se3Controller"

  transform_manager:

    agile:
      odom_topic: "odom" # name of the topic (expects nav_msgs/Odometry topic type)
      tf_from_attitude: # used for transforming velocities before full transform is available
        enabled: true
        attitude_topic: "attitude" # name of the attitude topic(expects geometry_msgs/QuaternionStamped topic type)
      namespace: "estimation_manager/agile" # the namespace of the topic (usually the node that publishes the topic)
      utm_based: true # if true, will publish tf to utm_origin
      inverted: true # publish as inverted tf (the default for inverted mrs tf tree convention)
      republish_in_frames: [] # the odometry message will be transformed and republished in the specified frames
